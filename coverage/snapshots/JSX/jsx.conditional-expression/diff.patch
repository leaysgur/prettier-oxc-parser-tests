===================================================================
--- theirs.jsx
+++ ours.jsx
@@ -53,36 +53,40 @@
   <span>
     thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
   </span>
 </div> ? (
-  "jsx mode from element breaking"
+  ("jsx mode from element breaking")
 ) : (
-  "a"
+  ("a")
 );
 
 // This ConditionalExpression prints in JSX mode because its consequent is a
 // JSXElement. It is breaking.
-jsxModeFromElementBreaking ? (
-  <div>
-    <span>
-      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
-    </span>
-  </div>
-) : (
-  "a"
-);
+jsxModeFromElementBreaking
+  ? (
+      (
+        <div>
+          <span>
+            thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
+          </span>
+        </div>
+      )
+    )
+  : ("a");
 
 // This ConditionalExpression prints in JSX mode because its alternate is a
 // JSXElement. It is breaking.
-jsxModeFromElementBreaking ? (
-  "a"
-) : (
-  <div>
-    <span>
-      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
-    </span>
-  </div>
-);
+jsxModeFromElementBreaking
+  ? ("a")
+  : (
+      (
+        <div>
+          <span>
+            thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
+          </span>
+        </div>
+      )
+    );
 
 // This chain of ConditionalExpressions prints in JSX mode because the parent of
 // the outermost ConditionalExpression is a JSXExpressionContainer. It is
 // non-breaking.
@@ -106,52 +110,56 @@
 // This chain of ConditionalExpressions prints in JSX mode because there is a
 // JSX element somewhere in the chain (in this case, at the end). It is
 // breaking; notice the consequents and alternates in the entire chain get
 // wrapped in parens.
-cable ? (
-  "satellite"
-) : isPublic ? (
-  "affairs"
-) : network ? (
-  <div>
-    <span>
-      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
-    </span>
-  </div>
-) : (
-  "dunno"
-);
+cable
+  ? ("satellite")
+  : isPublic
+    ? ("affairs")
+    : network
+      ? (
+          (
+            <div>
+              <span>
+                thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
+              </span>
+            </div>
+          )
+        )
+      : "dunno";
 
 // This chain of ConditionalExpressions prints in JSX mode because there is a
 // JSX element somewhere in the chain (in this case, at the beginning). It is
 // breaking; notice the consequents and alternates in the entire chain get
 // wrapped in parens.
-cable ? (
-  <div>
-    <span>
-      thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
-    </span>
-  </div>
-) : sateline ? (
-  "public"
-) : affairs ? (
-  "network"
-) : (
-  "dunno"
-);
+cable
+  ? (
+      (
+        <div>
+          <span>
+            thisIsASongAboutYourPoorSickPenguinHeHasAFeverAndHisToesAreBlueButIfISingToYourPoorSickPenguinHeWillFeelBetterInADayOrTwo
+          </span>
+        </div>
+      )
+    )
+  : sateline
+    ? ("public")
+    : affairs
+      ? ("network")
+      : "dunno";
 
 // This chain of ConditionalExpressions prints in JSX mode because there is a
 // JSX element somewhere in the chain. It is breaking; notice the consequents
 // and alternates in the entire chain get wrapped in parens.
 <div>
   {properties.length > 1 ||
-  (properties.length === 1 && properties[0].apps.size > 1) ? (
-    draggingApp == null || newPropertyName == null ? (
-      <MigrationPropertyListItem />
-    ) : (
-      <MigrationPropertyListItem apps={Immutable.List()} />
-    )
-  ) : null}
+  (properties.length === 1 && properties[0].apps.size > 1)
+    ? (
+        draggingApp == null || newPropertyName == null
+          ? (<MigrationPropertyListItem />)
+          : (<MigrationPropertyListItem apps={Immutable.List()} />)
+      )
+    : null}
 </div>;
 
 // #3552
 foo ? (

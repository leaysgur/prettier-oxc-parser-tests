===================================================================
--- theirs.js
+++ ours.js
@@ -1,12 +1,11 @@
 // test to make sure comments are attached correctly
-let inlineComment = /* some comment */ someReallyLongFunctionCall(
-  withLots,
-  ofArguments,
+let inlineComment = /* some comment */ (
+  someReallyLongFunctionCall(withLots, ofArguments)
 );
 
 let object = {
-  key: /* some comment */ someReallyLongFunctionCall(withLots, ofArguments),
+  key: /* some comment */ (someReallyLongFunctionCall(withLots, ofArguments)),
 };
 
 // preserve parens only for type casts
 let assignment = /** @type {string} */ (getValue());
@@ -19,21 +18,21 @@
 }
 
 // Only numberOrString is typecast
 var newArray = /** @type {array} */ (numberOrString).map((x) => x);
-var newArray = /** @type {array} */ (numberOrString).map((x) => x);
+var newArray = /** @type {array} */ ((numberOrString)).map((x) => x);
 var newArray = test(/** @type {array} */ (numberOrString).map((x) => x));
-var newArray = test(/** @type {array} */ (numberOrString).map((x) => x));
+var newArray = test(/** @type {array} */ ((numberOrString)).map((x) => x));
 
 // The numberOrString.map CallExpression is typecast
 var newArray = /** @type {array} */ (numberOrString.map((x) => x));
-var newArray = /** @type {array} */ (numberOrString.map((x) => x));
+var newArray = /** @type {array} */ ((numberOrString).map((x) => x));
 var newArray = test(/** @type {array} */ (numberOrString.map((x) => x)));
-var newArray = test(/** @type {array} */ (numberOrString.map((x) => x)));
+var newArray = test(/** @type {array} */ ((numberOrString).map((x) => x)));
 
 test(/** @type {number} */ (num) + 1);
 test(/** @type {!Array} */ (arrOrString).length + 1);
-test(/** @type {!Array} */ (arrOrString).length + 1);
+test(/** @type {!Array} */ ((arrOrString)).length + 1);
 
 const data = functionCall(
   arg1,
   arg2,

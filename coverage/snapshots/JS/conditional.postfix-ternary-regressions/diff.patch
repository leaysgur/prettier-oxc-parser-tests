===================================================================
--- theirs.js
+++ ours.js
@@ -24,13 +24,16 @@
 
 // Again, this case is a bit hard to distinguish the alternate.
 const eventsFromOrders =
   orderIds && orders
-    ? orderIds.map((id) => ({
-        type: "order",
-        date: orders[id].date,
-        data: orders[id],
-      }))
+    ? orderIds.map(
+        (id) =>
+          ({
+            type: "order",
+            date: orders[id].date,
+            data: orders[id],
+          }),
+      )
     : [];
 
 // Kinda weird to have dedents to the level of "return" in a function.
 function foo() {
@@ -58,10 +61,15 @@
 // This one is kinda confusing any way you slice itâ€¦
 const obj = {
   error:
     matchingReferencesError &&
-    (!input.value ||
-      (input.value && selectedReferencesDataStatus === REFERENCES_STATUS_EMPTY))
+    (
+      !input.value ||
+        (
+          input.value &&
+            selectedReferencesDataStatus === REFERENCES_STATUS_EMPTY
+        )
+    )
       ? translate("ra.input.references.all_missing", {
           _: "ra.input.references.all_missing",
         })
       : null,
@@ -104,39 +112,41 @@
 const delayedDataProvider = new Proxy(restProvider, {
   get: (target, name, self) =>
     name === "then" // as we await for the dataProvider, JS calls then on it. We must trap that call or else the dataProvider will be called with the then method
       ? self
-      : (resource, params) =>
-          new Promise((resolve) =>
-            setTimeout(
-              () => resolve(restProvider[name](resource, params)),
-              500,
-            ),
-          ),
+      : (
+          (resource, params) =>
+            new Promise((resolve) =>
+              setTimeout(
+                () => resolve(restProvider[name](resource, params)),
+                500,
+              ),
+            )
+        ),
 });
 
 function foo4() {
   return !match || match.length < 5
     ? line
-    : match[1] + match[2] + match[3] + match[4];
+    : (match[1] + match[2] + match[3] + match[4]);
 }
 
 function foo5() {
   return !match || match.length < 5
     ? foo(line)
-    : match[1] + match[2] + match[3] + match[4];
+    : (match[1] + match[2] + match[3] + match[4]);
 }
 
 function foo6() {
   return !match || match.length < 5
     ? linethatisverylongandbreaksthelinehooray
-    : match[1] + match[2] + match[3] + match[4];
+    : (match[1] + match[2] + match[3] + match[4]);
 }
 
 function foo7() {
   return !match || match.length < 5
     ? linethatisverylongandbreaksthelinehoorayjustabitlonger
-    : match[1] + match[2] + match[3] + match[4];
+    : (match[1] + match[2] + match[3] + match[4]);
 }
 
 const badComments = schema.model
   ? schema
